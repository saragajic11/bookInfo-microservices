api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  book-composite:
    get-composite-book:
      description: Returns a composite view of the specified book id
      notes: |
        # Normal response
        If the requested book id is found the method will return information regarding:
        1. Base book information
        1. Comments
        1. Ratings
        1. Book Theme Nights
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)
        
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        
        ## Book id 113
        200 - Ok, but no Comments will be returned
        
        ## Book id 213
        200 - Ok, but no Ratings will be returned
        
         ## Book id 313
        200 - Ok, but no Book Theme Nights will be returned
        
        ## Non numerical book id
        400 - A <b>Bad Request</b> error will be returned
        
        ## Book id 13
        404 - A <b>Not Found</b> error will be returned
        
        ## Negative book ids
        422 - An <b>Unprocessable Entity</b> error will be returned
    create-composite-book:
      description: Creates a composite book
      notes: |
        # Normal response
        The composite book information posted to the API will be splitted up and stored as separate book-info, comment, rating and book theme night entities.
        # Expected error responses
        1. If a book with the same bookId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-book:
      description: Deletes a book composite
      notes: |
        # Normal response
        Entities for book information, comment, rating and book theme night related to the specificed bookId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing insurance company will return <b>200 Ok</b>.
        
app:
  book-service:
    host: book
    port: 8080
  book-theme-night-service:
    host: book-theme-night
    port: 8080
  comment-service:
    host: comment
    port: 8080
  rating-service:
    host: rating
    port: 8080
        
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-books:
      destination: books
      producer:
        required-groups: auditGroup
    output-comments:
      destination: comments
      producer:
        required-groups: auditGroup
    output-book-theme-nights:
      destination: book-theme-nights
      producer:
        required-groups: auditGroup
    output-ratings:
      destination: ratings
      producer:
        required-groups: auditGroup
        
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest
  
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

logging:
  level:
    root: INFO
    microservices: DEBUG
    se.magnus: DEBUG

---
spring.profiles: docker

server.port: 8080

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka